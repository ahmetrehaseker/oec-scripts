name: Release
on:
  workflow_dispatch:
    inputs:
      integration:
        description: 'Integration'     
        required: true
      oec-version:
        description: 'Version of OEC'
        required: true
jobs:
  setup:
    name: Setup For Release
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo OK
  linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: [setup]
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Create Output Directory
      run: mkdir -p .release/oec-linux
    - name: Download Asset
      uses: i3h/download-release-asset@v1.2.0
      with:
        owner: ahmetrehaseker
        repo: oec
        tag: ${{ github.event.inputs.oec-version }}
        file: oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip
    - name: Extracting Linux Package
      run: unzip -qq oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip -d .release/oec-linux
    - name: Copy Integration Files
      run: cp -R ${{ github.event.inputs.integration }}/. .release/oec-linux
    - name: Retrieve Integration Version
      run: |
        echo ::set-env name=INTEGRATION_VERSION::$(jq -r --arg v "${{ github.event.inputs.integration }}" '.[$v]' release/oec-builder/oecScriptsVersion.json)
    - name: Retrieve Integration Name
      run: |
        echo ::set-env name=INTEGRATION_NAME::$(echo "${{ github.event.inputs.integration }}" | awk '{print tolower($0)}')
    - name: Check incomming part exists
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: ".release/oec-linux/opsgenie-${{ env.INTEGRATION_NAME }}"
    - name: "Release Incomming Part"
      working-directory: .release
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        INTEGRATION_PATH=oec-linux/opsgenie-${INTEGRATION_NAME}
        echo ${INTEGRATION_PATH}
        go get -u github.com/alexcesaro/log && \
        cd ${INTEGRATION_PATH} && \
        GOOS=linux GOARCH=amd64 go build -o send2opsgenie send2opsgenie.go
    - name: Compressing Linux Package
      run: zip -qq -j -r .release/oec-linux/opsgenie-${INTEGRATION_NAME}-${INTEGRATION_VERSION}-linux-amd64.zip .release/oec-linux/
    - name: Upload Artifacts 
      uses: actions/upload-artifact@v2
      with:
        name: Release Artifacts
        path: .release/oec-linux/*.zip
  rpm:
    name: RPM
    runs-on: ubuntu-latest
    needs: [setup]
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Create Output Directory
      run: mkdir -p .release/oec-rpm
    - name: Download Asset
      uses: i3h/download-release-asset@v1.2.0
      with:
        owner: ahmetrehaseker
        repo: oec
        tag: ${{ github.event.inputs.oec-version }}
        file: oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip
    - name: Working Dir
      run: pwd
    - name: Extracting Linux Package
      run: unzip -qq oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip -d .release/oec-rpm
    - name: Copy SPEC Files
      run: cp -R release/oec-builder/oec-rpm/. .release/oec-rpm
    - name: Copy Integration Files
      run: cp -R ${{ github.event.inputs.integration }}/. .release/oec-rpm/oec-scripts
    - name: Retrieve Integration Version
      run: |
        echo ::set-env name=INTEGRATION_VERSION::$(jq -r --arg v "${{ github.event.inputs.integration }}" '.[$v]' release/oec-builder/oecScriptsVersion.json)
    - name: Retrieve Integration Name
      run: |
        echo ::set-env name=INTEGRATION_NAME::$(echo "${{ github.event.inputs.integration }}" | awk '{print tolower($0)}')
    - name: Check incomming part exists
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: ".release/oec-rpm/oec-scripts/opsgenie-${{ env.INTEGRATION_NAME }}"
    - name: "Release Incomming Part"
      working-directory: .release
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        INTEGRATION_PATH=oec-rpm/oec-scripts/opsgenie-${INTEGRATION_NAME}
        echo ${INTEGRATION_PATH}
        go get -u github.com/alexcesaro/log && \
        cd ${INTEGRATION_PATH} && \
        GOOS=linux GOARCH=amd64 go build -o send2opsgenie send2opsgenie.go
    - name: Configure Spec File 
      working-directory: .release/oec-rpm
      run: |
        sed -i "s|<path_of_script>|$RPM_BUILD_ROOT/home/opsgenie/oec/scripts/actionExecutor.py|" oec-scripts/conf/config.json
        sed -i "s|<path_of_output_file_of_script>|$RPM_BUILD_ROOT/home/opsgenie/oec/output/output.txt|" oec-scripts/conf/config.json
        sed -i "s/<local | git>/local/g" oec-scripts/conf/config.json

        sed -i "s/%VERSION%/${INTEGRATION_VERSION}/g" SPECS/oec.spec
        sed -i "s/%VERSION%/${INTEGRATION_VERSION}/g" SPECS/oec-rhel6.spec

        sed -i "s/%INTEGRATION%/opsgenie-${INTEGRATION_NAME}/g" SPECS/oec.spec
        sed -i "s/%INTEGRATION%/opsgenie-${INTEGRATION_NAME}/g" SPECS/oec-rhel6.spec

        rpmbuild --target=x86_64 -ba SPECS/oec.spec
        rpmbuild --target=x86_64 -ba SPECS/oec-rhel6.spec
    - name: Upload Artifacts 
      uses: actions/upload-artifact@v2
      with:
        name: Release Artifacts
        path: ~/rpmbuild/SRPMS/x86_64/*.rpm
  win32:
    name: Windows 32
    runs-on: ubuntu-latest
    needs: [setup]
    if: github.ref == 'refs/heads/master'    
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Create Output Directory
      run: mkdir -p .release/oec-win32
    - name: Download Asset
      uses: i3h/download-release-asset@v1.2.0
      with:
        owner: ahmetrehaseker
        repo: oec
        tag: ${{ github.event.inputs.oec-version }}
        file: oec-win-386-${{ github.event.inputs.oec-version }}.zip
    - name: Extracting Win32 Package
      run: unzip -qq oec-win-386-${{ github.event.inputs.oec-version }}.zip -d .release/oec-win32
    - name: Copy Integration Files
      run: cp -R ${{ github.event.inputs.integration }}/. .release/oec-win32
    - name: Retrieve Integration Version
      run: |
        echo ::set-env name=INTEGRATION_VERSION::$(jq -r --arg v "${{ github.event.inputs.integration }}" '.[$v]' release/oec-builder/oecScriptsVersion.json)
    - name: Retrieve Integration Name
      run: |
        echo ::set-env name=INTEGRATION_NAME::$(echo "${{ github.event.inputs.integration }}" | awk '{print tolower($0)}')
    - name: Check incomming part exists
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: ".release/oec-win32/opsgenie-${{ env.INTEGRATION_NAME }}"
    - name: "Release Incomming Part"
      working-directory: .release
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        INTEGRATION_PATH=oec-win32/opsgenie-${INTEGRATION_NAME}
        echo ${INTEGRATION_PATH}
        go get -u github.com/alexcesaro/log && \
        cd ${INTEGRATION_PATH} && \
        GOOS=windows GOARCH=386 go build -o send2opsgenie32.exe send2opsgenie.go
    - name: Compressing Win32 Package
      run: zip -qq -j -r .release/oec-win32/opsgenie-${INTEGRATION_NAME}-${INTEGRATION_VERSION}-win-386.zip .release/oec-win32/
    - name: Upload Artifacts 
      uses: actions/upload-artifact@v2
      with:
        name: Release Artifacts
        path: .release/oec-win32/*.zip
  win64:
    name: Windows 64
    runs-on: ubuntu-latest
    needs: [setup]
    if: github.ref == 'refs/heads/master'    
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Create Output Directory
      run: mkdir -p .release/oec-win64
    - name: Download Asset
      uses: i3h/download-release-asset@v1.2.0
      with:
        owner: ahmetrehaseker
        repo: oec
        tag: ${{ github.event.inputs.oec-version }}
        file: oec-win-amd64-${{ github.event.inputs.oec-version }}.zip
    - name: Extracting Win64 Package
      run: unzip -qq oec-win-amd64-${{ github.event.inputs.oec-version }}.zip -d .release/oec-win64
    - name: Copy Integration Files
      run: cp -R ${{ github.event.inputs.integration }}/. .release/oec-win64
    - name: Retrieve Integration Version
      run: |
        echo ::set-env name=INTEGRATION_VERSION::$(jq -r --arg v "${{ github.event.inputs.integration }}" '.[$v]' release/oec-builder/oecScriptsVersion.json)
    - name: Retrieve Integration Name
      run: |
        echo ::set-env name=INTEGRATION_NAME::$(echo "${{ github.event.inputs.integration }}" | awk '{print tolower($0)}')
    - name: Check incomming part exists
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: ".release/oec-win64/opsgenie-${{ env.INTEGRATION_NAME }}"
    - name: "Release Incomming Part"
      working-directory: .release
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        INTEGRATION_PATH=oec-win64/opsgenie-${INTEGRATION_NAME}
        echo ${INTEGRATION_PATH}
        go get -u github.com/alexcesaro/log && \
        cd ${INTEGRATION_PATH} && \
        GOOS=windows GOARCH=amd64 go build -o send2opsgenie32.exe send2opsgenie.go
    - name: Compressing Win 64 Package
      run: zip -qq -j -r .release/oec-win64/opsgenie-${INTEGRATION_NAME}-${INTEGRATION_VERSION}-win-amd64.zip .release/oec-win64/
    - name: Upload Artifacts 
      uses: actions/upload-artifact@v2
      with:
        name: Release Artifacts
        path: .release/oec-win64/*.zip
